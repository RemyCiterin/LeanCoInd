import Mathlib.CategoryTheory.ConcreteCategory.BundledHom
import Mathlib.CategoryTheory.ConcreteCategory.Bundled
import Mathlib.Order.OmegaCompletePartialOrder
import Mathlib.CategoryTheory.Closed.Cartesian
import Mathlib.Tactic.Linarith
import CoInd.Tactic
import CoInd.Kahn
import CoInd.OmegaCompletePartialOrder
import CoInd.Lustre

open OmegaCompletePartialOrder

-- As admissible functions are just continuous functions to Prop, it is possible to define the composition of
-- continuous functions and admissible properties. Then one can define an admissible invariant over a lustre
-- node as the composition of Square and an admissible function from the state of the node to Kahn Prop
def Admissible.comp {Œ±: Type u} {Œ≤: Type v}
  [OmegaCompletePartialOrder Œ±] [OmegaCompletePartialOrder Œ≤] [OrderBot Œ±] [OrderBot Œ≤]
  (p: Admissible Œ≤) (f: Œ± ‚ÜíùíÑ Œ≤) : Admissible Œ± where
  toSet x := f x ‚àà p
  admissible' := by
    intro chain h‚ÇÅ
    rw [f.continuous]
    apply p.admissible
    exact h‚ÇÅ

inductive Square.SetF
  (aux: Set (Kahn Prop)) (s: Kahn Prop) : Prop where
| bot : ‚ä• = s ‚Üí SetF aux s
| cons x xs : x ::: xs = s ‚Üí x ‚Üí aux xs ‚Üí SetF aux s

@[simps! coe]
def Square.SetF_mono : (Kahn Prop ‚Üí Prop) ‚Üío (Kahn Prop ‚Üí Prop) where
  toFun aux x := Square.SetF aux x
  monotone' s‚ÇÅ s‚ÇÇ h‚ÇÅ x h‚ÇÇ := by
    cases x using Kahn.cases with
    | bot =>
      apply SetF.bot
      rfl
    | cons x xs =>
      apply SetF.cons x xs
      ¬∑ rfl
      ¬∑ cases h‚ÇÇ with
        | bot h‚ÇÉ =>
          simp [Bot.bot, Kahn.cons] at h‚ÇÉ
        | cons y ys h‚ÇÉ h‚ÇÑ h‚ÇÖ =>
          rw [Kahn.cons.injEq] at h‚ÇÉ
          induction h‚ÇÉ.left
          induction h‚ÇÉ.right
          assumption
      ¬∑ cases h‚ÇÇ with
        | bot h‚ÇÉ =>
          simp [Bot.bot, Kahn.cons] at h‚ÇÉ
        | cons y ys h‚ÇÉ h‚ÇÑ h‚ÇÖ =>
          rw [Kahn.cons.injEq] at h‚ÇÉ
          induction h‚ÇÉ.left
          induction h‚ÇÉ.right
          apply h‚ÇÅ
          assumption


noncomputable def Square : Admissible (Kahn Prop) where
  toSet s := pgfp (Square.SetF_mono) ‚ä• s

  admissible' := by
    intro chain h‚ÇÅ
    coinduction [h‚ÇÅ] generalizing [chain] using pgfp.theorem Square.SetF_mono
    clear h‚ÇÅ chain
    intro _ ‚ü®chain, eq‚ÇÅ, h‚ÇÅ‚ü©
    induction eq‚ÇÅ
    rw [Kahn.œâSup.unfold]
    cases Kahn.findCons chain with
    | bot h‚ÇÇ =>
      apply Square.SetF.bot
      rfl
    | cons n x xs h‚ÇÇ =>
      apply Square.SetF.cons x (œâSup xs)
      ¬∑ rfl
      ¬∑ specialize h‚ÇÅ (n+0)
        rw [‚Üêh‚ÇÇ 0, ‚Üêpgfp.unfold] at h‚ÇÅ
        cases h‚ÇÅ with
        | bot h‚ÇÉ =>
          simp [Bot.bot, Kahn.cons] at h‚ÇÉ
        | cons y ys h‚ÇÉ h‚ÇÑ h‚ÇÖ =>
          rw [Kahn.cons.injEq] at h‚ÇÉ
          induction h‚ÇÉ.left
          assumption
      ¬∑ apply Or.inl
        exists xs
        constructor
        ¬∑ rfl
        ¬∑ intro m
          specialize h‚ÇÅ (n+m)
          rw [‚Üêh‚ÇÇ m, ‚Üêpgfp.unfold] at h‚ÇÅ
          cases h‚ÇÅ with
          | bot h‚ÇÉ =>
            simp [Bot.bot, Kahn.cons] at h‚ÇÉ
          | cons y ys h‚ÇÉ h‚ÇÑ h‚ÇÖ =>
            rw [Kahn.cons.injEq] at h‚ÇÉ
            induction h‚ÇÉ.left
            induction Eq.symm h‚ÇÉ.right
            cases h‚ÇÖ with
            | inl h =>
              cases h
            | inr h =>
              exact h

#check pgfp.unfold

@[refinment_type]
def Square.unfold_cons (x: Prop) (xs: Kahn Prop) :
  x ‚Üí xs ‚àà Square ‚Üí x ::: xs ‚àà Square := by
  intro h‚ÇÅ h‚ÇÇ
  simp only [Square, Membership.mem]
  rw [‚Üêpgfp.unfold]
  apply Square.SetF.cons x xs rfl h‚ÇÅ (Or.inr h‚ÇÇ)

@[simp]
def Square.rewrite_cons (x: Prop) (xs: Kahn Prop) :
  (x ::: xs ‚àà Square) = (x ‚àß xs ‚àà Square) := by
  apply propext
  constructor
  ¬∑ intro h
    simp only [Square, Membership.mem] at h
    rw [‚Üêpgfp.unfold] at h
    cases h with
    | bot eq =>
      simp [Bot.bot, Kahn.cons] at eq
    | cons y ys eq h‚ÇÅ h‚ÇÇ =>
      rw [Kahn.cons.injEq] at eq
      induction eq.left
      induction eq.right
      constructor
      ¬∑ exact h‚ÇÅ
      ¬∑ cases h‚ÇÇ with
        | inl h =>
          cases h
        | inr h =>
          exact h
  ¬∑ intro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    refinment_type

@[refinment_type]
def Square.unfold_bot :
  ‚ä•  ‚àà Square := by
  simp only [Square, Membership.mem]
  rw [‚Üêpgfp.unfold]
  apply Square.SetF.bot rfl

def Square.coind (hyp: Kahn Prop ‚Üí Prop) :
  (‚àÄ x, hyp x ‚Üí Square.SetF (Œª x => hyp x ‚à® x ‚àà Square) x)
  ‚Üí ‚àÄ x, hyp x ‚Üí x ‚àà Square := by
  intro h‚ÇÅ x h‚ÇÇ
  simp only [Membership.mem, Square]
  apply pgfp.theorem _ hyp
  clear h‚ÇÇ x
  intro x h‚ÇÇ
  specialize h‚ÇÅ x h‚ÇÇ
  have : (fun x => hyp x ‚à® x ‚àà Square) ‚â§ hyp ‚äî (pgfp SetF_mono) hyp := by
    intro x h‚ÇÅ
    cases h‚ÇÅ with
    | inl h => apply Or.inl h
    | inr h =>
      apply Or.inr
      apply (pgfp SetF_mono).monotone bot_le
      exact h
  apply SetF_mono.monotone this
  apply h‚ÇÅ
  apply h‚ÇÇ
