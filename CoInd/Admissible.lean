import Mathlib.CategoryTheory.ConcreteCategory.BundledHom
import Mathlib.CategoryTheory.ConcreteCategory.Bundled
import Mathlib.Order.OmegaCompletePartialOrder
import Mathlib.CategoryTheory.Closed.Cartesian
import Mathlib.Tactic.Linarith
import CoInd.Tactic
import CoInd.Kahn
import CoInd.OmegaCompletePartialOrder

open OmegaCompletePartialOrder

-- As admissible functions are just continuous functions to Prop,
-- it is possible to define the composition of continuous functions
-- and admissible properties. Then one can define an admissible
-- invariant over a lustre node as the composition of Box and an
-- admissible function from the state of the node to Kahn Prop
def OmegaCompletePartialOrder.Admissible.comp {Œ±: Type u} {Œ≤: Type v}
  [OmegaCompletePartialOrder Œ±] [OmegaCompletePartialOrder Œ≤] [OrderBot Œ±] [OrderBot Œ≤]
  (p: Admissible Œ≤) (f: Œ± ‚ÜíùíÑ Œ≤) : Admissible Œ± where
  toSet x := p (f x)
  admissible' := by
    intro chain h‚ÇÅ
    rw [f.continuous]
    apply p.admissible
    exact h‚ÇÅ

@[simp] def OmegaCompletePartialOrder.Admissible.comp_apply {Œ±: Type u} {Œ≤: Type v}
  [OmegaCompletePartialOrder Œ±] [OmegaCompletePartialOrder Œ≤] [OrderBot Œ±] [OrderBot Œ≤]
  (p: Admissible Œ≤) (f: Œ± ‚ÜíùíÑ Œ≤) (x: Œ±) : (comp p f x) = (p (f x)) := by
  rfl

namespace Kahn
inductive Box.SetF
  (aux: Set (Kahn Prop)) (s: Kahn Prop) : Prop where
| bot : ‚ä• = s ‚Üí SetF aux s
| cons x xs : x ::: xs = s ‚Üí x ‚Üí aux xs ‚Üí SetF aux s

@[simps! coe]
def Box.SetF_mono : (Kahn Prop ‚Üí Prop) ‚Üío (Kahn Prop ‚Üí Prop) where
  toFun aux x := Box.SetF aux x
  monotone' s‚ÇÅ s‚ÇÇ h‚ÇÅ x h‚ÇÇ := by
    cases x using Kahn.cases with
    | bot =>
      apply SetF.bot
      rfl
    | cons x xs =>
      apply SetF.cons x xs
      ¬∑ rfl
      ¬∑ cases h‚ÇÇ with
        | bot h‚ÇÉ =>
          simp [Bot.bot, Kahn.cons] at h‚ÇÉ
        | cons y ys h‚ÇÉ h‚ÇÑ h‚ÇÖ =>
          rw [Kahn.cons.injEq] at h‚ÇÉ
          induction h‚ÇÉ.left
          induction h‚ÇÉ.right
          assumption
      ¬∑ cases h‚ÇÇ with
        | bot h‚ÇÉ =>
          simp [Bot.bot, Kahn.cons] at h‚ÇÉ
        | cons y ys h‚ÇÉ h‚ÇÑ h‚ÇÖ =>
          rw [Kahn.cons.injEq] at h‚ÇÉ
          induction h‚ÇÉ.left
          induction h‚ÇÉ.right
          apply h‚ÇÅ
          assumption


noncomputable def Box : Admissible (Kahn Prop) where
  toSet s := pgfp (Box.SetF_mono) ‚ä• s

  admissible' := by
    intro chain h‚ÇÅ
    coinduction [h‚ÇÅ] generalizing [chain] using pgfp.theorem Box.SetF_mono
    intro _ ‚ü®chain, eq‚ÇÅ, h‚ÇÅ‚ü©
    induction eq‚ÇÅ
    rw [Kahn.œâSup.unfold]
    cases Kahn.findCons chain with
    | bot h‚ÇÇ =>
      apply Box.SetF.bot
      rfl
    | cons n x xs h‚ÇÇ =>
      apply Box.SetF.cons x (œâSup xs)
      ¬∑ rfl
      ¬∑ specialize h‚ÇÅ (n+0)
        rw [‚Üêh‚ÇÇ 0, ‚Üêpgfp.unfold] at h‚ÇÅ
        cases h‚ÇÅ with
        | bot h‚ÇÉ =>
          simp [Bot.bot, Kahn.cons] at h‚ÇÉ
        | cons y ys h‚ÇÉ h‚ÇÑ h‚ÇÖ =>
          rw [Kahn.cons.injEq] at h‚ÇÉ
          induction h‚ÇÉ.left
          assumption
      ¬∑ apply Or.inl
        exists xs
        constructor
        ¬∑ rfl
        ¬∑ intro m
          specialize h‚ÇÅ (n+m)
          rw [‚Üêh‚ÇÇ m, ‚Üêpgfp.unfold] at h‚ÇÅ
          cases h‚ÇÅ with
          | bot h‚ÇÉ =>
            simp [Bot.bot, Kahn.cons] at h‚ÇÉ
          | cons y ys h‚ÇÉ h‚ÇÑ h‚ÇÖ =>
            rw [Kahn.cons.injEq] at h‚ÇÉ
            induction h‚ÇÉ.left
            induction Eq.symm h‚ÇÉ.right
            cases h‚ÇÖ with
            | inl h =>
              cases h
            | inr h =>
              exact h

#check pgfp.unfold

@[refinment_type]
def Box.cons (x: Prop) (xs: Kahn Prop) :
  x ‚Üí Box xs ‚Üí Box (x ::: xs) := by
  intro h‚ÇÅ h‚ÇÇ
  simp only [Box, Membership.mem]
  rw [‚Üêpgfp.unfold]
  apply Box.SetF.cons x xs rfl h‚ÇÅ (Or.inr h‚ÇÇ)

@[simp]
def Box.rewrite_cons (x: Prop) (xs: Kahn Prop) :
  Box (x ::: xs) = (x ‚àß Box xs) := by
  apply propext
  constructor
  ¬∑ intro h
    simp only [Box, Membership.mem] at h
    rw [‚Üêpgfp.unfold] at h
    cases h with
    | bot eq =>
      simp [Bot.bot, Kahn.cons] at eq
    | cons y ys eq h‚ÇÅ h‚ÇÇ =>
      rw [Kahn.cons.injEq] at eq
      induction eq.left
      induction eq.right
      constructor
      ¬∑ exact h‚ÇÅ
      ¬∑ cases h‚ÇÇ with
        | inl h =>
          cases h
        | inr h =>
          exact h
  ¬∑ intro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    refinment_type

@[refinment_type]
def Box.bot :
  Box ‚ä• := by
  simp only [Box]
  rw [‚Üêpgfp.unfold]
  apply Box.SetF.bot rfl

def Box.coind (hyp: Kahn Prop ‚Üí Prop) :
  (‚àÄ x, hyp x ‚Üí Box.SetF (Œª x => hyp x ‚à® Box x) x)
  ‚Üí ‚àÄ x, hyp x ‚Üí Box x := by
  intro h‚ÇÅ x h‚ÇÇ
  simp only [Membership.mem, Box]
  apply pgfp.theorem _ hyp
  clear h‚ÇÇ x
  intro x h‚ÇÇ
  specialize h‚ÇÅ x h‚ÇÇ
  have : (fun x => hyp x ‚à® Box x) ‚â§ hyp ‚äî (pgfp SetF_mono) hyp := by
    intro x h‚ÇÅ
    cases h‚ÇÅ with
    | inl h => apply Or.inl h
    | inr h =>
      apply Or.inr
      apply (pgfp SetF_mono).monotone (OrderBot.bot_le _)
      exact h
  apply SetF_mono.monotone this
  apply h‚ÇÅ
  apply h‚ÇÇ

-- Box P ‚àß Box Q ‚Üí Box (P.and Q) but the inverse is false because we
-- must ensure that the streams are not finite. In practice we prefere
-- (Box P).Admissible (Box Q) instead of Box (P.and Q)
def Box.and
  [OmegaCompletePartialOrder Œ±] [OrderBot Œ±]
  (P Q: Kahn Prop)
  (h: Box P ‚àß Box Q) :
  Box (P.and Q) := by
  coinduction [h] generalizing [P, Q] using Box.coind
  intro pq ‚ü®p, q, eq‚ÇÅ, h‚ÇÅ, h‚ÇÇ‚ü©
  induction eq‚ÇÅ
  cases p with
  | bot =>
    apply SetF.bot
    simp
  | cons p ps =>
    cases q with
    | bot =>
      apply SetF.bot
      simp
    | cons q qs =>
      simp only [rewrite_cons] at h‚ÇÅ h‚ÇÇ
      apply SetF.cons (p ‚àß q) (ps.and qs)
      ¬∑ simp
      ¬∑ exact ‚ü®h‚ÇÅ.left, h‚ÇÇ.left‚ü©
      ¬∑ apply Or.inl
        exists ps
        exists qs
        simp only [true_and]
        exact ‚ü®h‚ÇÅ.right, h‚ÇÇ.right‚ü©

-- Same as Kahn.and, Kahn.or is very limited because we must ensure that streams
-- are infinite to use it. In practice we prefere
-- (Box P).Admissible (Box Q) instead of Box (P.or Q)
def Box.or
  [OmegaCompletePartialOrder Œ±] [OrderBot Œ±]
  (P Q: Kahn Prop) (h: Box P ‚à® Box Q) :
  Box (P.or Q) := by
  coinduction [h] generalizing [P, Q] using Box.coind
  rintro pq ‚ü®p, q, eq‚ÇÅ, (h‚ÇÅ | h‚ÇÅ)‚ü©
  <;> induction eq‚ÇÅ
  ¬∑ cases p with
    | bot =>
      apply SetF.bot
      simp
    | cons p ps =>
      cases q with
      | bot =>
        apply SetF.bot
        simp
      | cons q qs =>
        simp at h‚ÇÅ
        apply SetF.cons p (ps.or qs) _ h‚ÇÅ.left
        ¬∑ apply Or.inl
          exists ps
          exists qs
          simp [h‚ÇÅ.right]
        ¬∑ simp [h‚ÇÅ.left]
  ¬∑ cases p with
    | bot =>
      apply SetF.bot
      simp
    | cons p ps =>
      cases q with
      | bot =>
        apply SetF.bot
        simp
      | cons q qs =>
        simp at h‚ÇÅ
        apply SetF.cons q (ps.or qs) _ h‚ÇÅ.left
        ¬∑ apply Or.inl
          exists ps
          exists qs
          simp [h‚ÇÅ.right]
        ¬∑ simp [h‚ÇÅ.left]



def Box.coind2
  [OmegaCompletePartialOrder Œ±] [OrderBot Œ±]
  (f: Œ± ‚ÜíùíÑ Kahn Prop) (hyp: Œ± ‚Üí Prop) :
  (‚àÄ x, hyp x ‚Üí f x = ‚ä• ‚à® ‚àÉ y ys, f x = y ::: xs ‚àß y ‚àß hyp ys)
  ‚Üí ‚àÄ x, hyp x ‚Üí Box (f x) := by
  intro h‚ÇÅ x h‚ÇÇ
  coinduction generalizing [x, f x] using Box.coind
  intro w ‚ü®x, fx, eq‚ÇÅ, h‚ÇÅ, h‚ÇÇ‚ü©
  induction eq‚ÇÅ
  specialize h‚ÇÅ x h‚ÇÇ
  sorry

end Kahn

syntax:max "‚ñ°" term:max : term
macro_rules
| `(‚ñ° $t) => `(Kahn.Box $t)

-- I try to pretty-print Kahn.Box using ‚ñ° but I fail because of the implicit
-- coercions...
--delab_rule Kahn.Box
--| `($_ $P) => do ``(‚ñ° $P)
